<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <div>
        <ul class="ul-pagination"></ul>
    </div>
    <button onclick="left()"><<</button>
    <button onclick="right()">>></button>
    <script>
        let options= {
            newsToShow: '4',
            container: '.ul-pagination',
            maxPages: '5'
        }

let news = [
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
  {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
  {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
 {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
 {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
 {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
 {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    {title: 'some title', subtitle: 'subtitle', img: 'image'},
    
]
let items = []
let pages = Math.ceil(news.length / options.newsToShow);
let rightActive = true
let leftActive = false;
let current = 1;
let ul = document.querySelector(options.container)




let prevIndex = document.createElement('li')
prevIndex.innerHTML = '1'
let dots_left = document.createElement('li')
dots_left.innerHTML = '...'
let dots_right = document.createElement('li')
dots_right.innerHTML = '...'
let nextIdnex = document.createElement('li')
nextIdnex.innerHTML = pages

function setStart() {
	items = []
	//создаем начальный массив
for (let i = 1; i < pages; i++) {
	if (i <= options.maxPages) {
		var element = i
		items.push(element)
	}
} //end for
	let ul = document.querySelector(options.container)
	items.forEach(function(i, value) {
		var li = document.createElement('li')
		li.innerHTML = value + 1
		ul.append(li)
	})
	ul.firstChild.classList.add('active')
	current = 1

}

setStart()

ul.addEventListener('click', (e) => {
	if (e.target !== ul && !isNaN(e.target.innerHTML) && !e.target.classList.contains('.active')) {
	ul.querySelector('.active').classList.remove('active')
	e.target.classList.add('active')
	current = e.target.innerHTML
	let currentEl = ul.querySelector('.active')
	if ( currentEl.nextElementSibling !== null && isNaN(currentEl.nextElementSibling.innerHTML) && currentEl.previousElementSibling !== null ){ // right //prev == n
		console.log(currentEl.innerHTML )
		console.log(currentEl.innerHTML == 1)
		 
						items.forEach(function(i, value) {
			items[value]++
			myArray[value].innerHTML = items[value]
			
			
		})//end foreach
						currentEl.classList.remove('active')
			e.target.previousElementSibling.classList.add('active') // if prev not null
		//current--
		setLeftSide(items[0], items[items.length - 1], items)
		setRightSide(items[0], items[items.length - 1], items)
			//	if (currentEl.innerHTML == 1){
			//console.log('setStart')
		//}
		

	} else if (currentEl.innerHTML == 1 && isNaN(currentEl.nextElementSibling.innerHTML)){ //set start range
		console.log('kek')
		ul.innerHTML= ''
		setStart()
		ul.append(dots_right)
		ul.append(nextIdnex)
		current = 1
	} // end of right
	if ( currentEl.previousElementSibling !== null && isNaN(currentEl.previousElementSibling.innerHTML) ){
		console.log('left')
		items.forEach(function(i, value) {
			items[value]--
			myArray[value].innerHTML = items[value]
			currentEl.classList.remove('active')
			e.target.nextElementSibling.classList.add('active') // if prev not null
			
		})//end foreach
			setLeftSide(items[0], items[items.length - 1], items)
		setRightSide(items[0], items[items.length - 1], items)
	}//end of left
	}//end of 1 ... x, y, z ... n 
	
})


startPos = (options.startFrom - 1) * options.newsToShow
endPos = startPos + options.newsToShow

let NewsArray = news.slice(startPos, endPos)
console.log(NewsArray)
for (let value of NewsArray) {
	console.log(value['title'])
}

var childrens = ul.childNodes
let myArray = Array.from(ul.childNodes)
	if (pages - items[items.length - 1] >= 2) {
		ul.append(dots_right)
		ul.append(nextIdnex)
		console.log(' >=2')
	}
function right() {
	var leftActive = true;
	let active = ul.querySelector('.active')

	if ((items[items.length - 1] - current) == 1 && (items[items.length - 1] !== pages)) { // 1 2 3 4 5, 5 - 4 = 1 кол-во элементов после active

		items.forEach(function(i, value) {
			items[value]++
			myArray[value].innerHTML = items[value]
		})
		current++
	} else {
		if (active.nextElementSibling !== null) {
			active.nextElementSibling.classList.add('active')
			active.classList.remove('active')
			current++
		}
	}
	
setRightSide(items[0], items[items.length - 1], items)
} //right


function left() {
	let active = ul.querySelector('.active')
	if ((items[1] - current) == 0 && (items[0] !== 1)) { // 1 2 3 4 5, 5 - 4 = 1 кол-во элементов после active
		items.forEach(function(i, value) {
			items[value]--
			myArray[value].innerHTML = items[value]
		})
		current--
	} else {

		if ((active.previousElementSibling !== null) && !(isNaN(active.previousElementSibling.innerHTML))) {
			active.previousElementSibling.classList.add('active')
			active.classList.remove('active')
			current--
		}
	}
	setLeftSide(items[0], items[items.length - 1], items)
	console.log(myArray)
}//left


function setRightSide(firstIndex, lastIndex, array) {
	if (pages - lastIndex == 1) {
		ul.lastChild.previousElementSibling.remove() // remove ...
	}

	if (pages - lastIndex == 0 && current !== pages) {
		ul.lastChild.remove()
	}

	if (firstIndex - 1 > 1) {
		ul.prepend(dots_left)
		ul.prepend(prevIndex)
	}

	if (firstIndex - 1 == 1) {
		ul.prepend(prevIndex)
	}
}

function setLeftSide(firstIndex, lastIndex, array) {
	if (firstIndex - 1 == 1) {
		ul.firstChild.nextElementSibling.remove() // remove ...
	}

	if (firstIndex - 1 == 0 && current !== 1) {
		ul.firstChild.remove() // remove ...
	}

	if (pages - firstIndex == options.maxPages) {
		ul.append(nextIdnex)
		console.log('next')
	}
	if (pages - firstIndex > options.maxPages) {
		ul.insertBefore(dots_right, ul.lastChild)

	}
}

</script> 
    <style type="text/css">
      .active {
        font-weight: bold;
        font-size: 23px;
        text-decoration: underline;
      }
      ul {
        list-style: none

      }
      li {
        display: inline-block;
        padding: 15px;
        cursor: pointer;
        font-size: 20px;
      }
    </style>
</body>
</html>
